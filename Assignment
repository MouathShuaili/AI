import tensorflow as tf
from tensorflow import keras
from keras import Sequential
from keras.layers import Dense,Conv2D,MaxPooling2D,Flatten,BatchNormalization,Dropout

train_ds = keras.utils.image_dataset_from_directory(
    directory = '/content/drive/MyDrive/AI/train', #  the path of train data from google drive 
    labels='inferred', # class a will be assigned 0 and class b will be assigned 1; in this case, Apple label is 0 and Tomatoe label is 1 
    label_mode = 'int',
    batch_size=32,
    image_size=(256,256)  #Uniformly adjusting the size of images by resizing them as the original dataset comprises of different sizes
    
validation_ds = keras.utils.image_dataset_from_directory(
    directory = '/content/drive/MyDrive/AI/train',
    labels='inferred',
    label_mode = 'int',
    batch_size=32,
    image_size=(256,256)
)   # Images are represented as arrays using numpy

# Normalize  (bringing the pixel values between 0 and 1)
def process(image,label):
    image = tf.cast(image/255. ,tf.float32)
    return image,label

train_ds = train_ds.map(process) 
validation_ds = validation_ds.map(process)

# create Convolutional Neural Network  model

model = Sequential()

model.add(Conv2D(32,kernel_size=(3,3),padding='valid',activation='relu',input_shape=(256,256,3)))  # 32 filters

#model.add(BatchNormalization())  # added to reduce overfitting
model.add(MaxPooling2D(pool_size=(2,2),strides=2,padding='valid'))

model.add(Conv2D(64,kernel_size=(3,3),padding='valid',activation='relu'))

#model.add(BatchNormalization())  # added to reduce overfitting
model.add(MaxPooling2D(pool_size=(2,2),strides=2,padding='valid'))

model.add(Conv2D(128,kernel_size=(3,3),padding='valid',activation='relu'))
#model.add(BatchNormalization())  # added to reduce overfitting
model.add(MaxPooling2D(pool_size=(2,2),strides=2,padding='valid'))

model.add(Flatten())

model.add(Dense(128,activation='relu'))
#model.add(Dropout(0.1))  # added to reduce overfitting
model.add(Dense(64,activation='relu'))
#model.add(Dropout(0.1))  # added to reduce overfitting
model.add(Dense(1,activation='sigmoid'))  #output layer

model.compile(optimizer='adam',loss='binary_crossentropy',metrics=['accuracy']) #binary_crossentropy - binary classification

history = model.fit(train_ds,epochs=10,validation_data=validation_ds)

import matplotlib.pyplot as plt

plt.plot(history.history['accuracy'],color='red',label='train')
plt.plot(history.history['val_accuracy'],color='blue',label='validation')
plt.legend()
plt.show()

plt.plot(history.history['loss'],color='red',label='train')
plt.plot(history.history['val_loss'],color='blue',label='validation')
plt.legend()
plt.show()

plt.plot(history.history['loss'],color='red',label='train')
plt.plot(history.history['val_loss'],color='blue',label='validation')
plt.legend()
plt.show()

# remove the # from batch normalization and drop out to see if validation acc is increasing

# Testing phase

import cv2  # open cv library

test_img = cv2.imread('/content/drive/MyDrive/AI/test/tomatoes/img_p1_19.jpeg')

plt.imshow(test_img)

test_img.shape

test_img = cv2.resize(test_img,(256,256))  # trained data size is 256 * 256

test_input = test_img.reshape((1,256,256,3))  #   1 image of size 256 * 256 and color image with 3 channels

model.predict(test_input)  # 0 refering to Apple and 1 refering to Tomatoe

test_img = cv2.imread('/content/drive/MyDrive/AI/test/apples/img_p1_29.jpeg')

plt.imshow(test_img)

test_img.shape

test_img = cv2.resize(test_img,(256,256))  # trained data size is 256 * 256

test_input = test_img.reshape((1,256,256,3))  #   1 image of size 256 * 256 and color image with 3 channels

model.predict(test_input)  # 0 refering to Apple and 1 refering to Tomatoe
